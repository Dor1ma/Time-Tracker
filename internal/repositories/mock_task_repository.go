// Code generated by MockGen. DO NOT EDIT.
// Source: F:\Time-Tracker\internal\repositories\task_repository.go

// Package repositories is a generated GoMock package.
package repositories

import (
	reflect "reflect"
	time "time"

	models "github.com/Dor1ma/Time-Tracker/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// GetUserTasks mocks base method.
func (m *MockTaskRepository) GetUserTasks(userID uint, startDate, endDate time.Time) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTasks", userID, startDate, endDate)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTasks indicates an expected call of GetUserTasks.
func (mr *MockTaskRepositoryMockRecorder) GetUserTasks(userID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetUserTasks), userID, startDate, endDate)
}

// StartTask mocks base method.
func (m *MockTaskRepository) StartTask(userID uint, taskName string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTask", userID, taskName)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTask indicates an expected call of StartTask.
func (mr *MockTaskRepositoryMockRecorder) StartTask(userID, taskName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockTaskRepository)(nil).StartTask), userID, taskName)
}

// StopTask mocks base method.
func (m *MockTaskRepository) StopTask(taskID uint) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTask", taskID)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTask indicates an expected call of StopTask.
func (mr *MockTaskRepositoryMockRecorder) StopTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTask", reflect.TypeOf((*MockTaskRepository)(nil).StopTask), taskID)
}
