basePath: /
definitions:
  dto.CreateUserRequest:
    properties:
      passportNumber:
        type: string
    required:
    - passportNumber
    type: object
  dto.StartTaskRequest:
    properties:
      task_name:
        type: string
      user_id:
        type: integer
    required:
    - task_name
    - user_id
    type: object
  dto.StopTaskRequest:
    properties:
      task_id:
        type: integer
    required:
    - task_id
    type: object
  dto.UpdateUserRequest:
    properties:
      address:
        type: string
      name:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    required:
    - address
    - name
    - patronymic
    - surname
    type: object
  models.Task:
    properties:
      createdAt:
        type: string
      endTime:
        type: string
      hours:
        type: integer
      id:
        type: integer
      minutes:
        type: integer
      startTime:
        type: string
      taskName:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.User:
    properties:
      address:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      passportNumber:
        type: string
      patronymic:
        type: string
      surname:
        type: string
      updatedAt:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a simple time tracker server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Time Tracker API
  version: "1.0"
paths:
  /tasks/start:
    post:
      consumes:
      - application/json
      description: Start a new task for a user
      parameters:
      - description: Start task request
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.StartTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Start a new task
      tags:
      - tasks
  /tasks/stop:
    post:
      consumes:
      - application/json
      description: Stop an existing task for a user
      parameters:
      - description: Stop task request
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.StopTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Stop an existing task
      tags:
      - tasks
  /users:
    get:
      consumes:
      - application/json
      description: Get all users with optional filters and pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Filters in JSON format
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with a given passport number
      parameters:
      - description: Create user request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete an existing user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user with given details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing user
      tags:
      - users
  /users/{user_id}/tasks:
    get:
      consumes:
      - application/json
      description: Get tasks for a user within a specified date range, sorted by total
        time spent
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Start date in format YYYY-MM-DD
        in: query
        name: start_date
        required: true
        type: string
      - description: End date in format YYYY-MM-DD
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get user tasks
      tags:
      - tasks
swagger: "2.0"
